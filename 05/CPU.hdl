// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
// Instruction (instruction[15])
    Mux16(a=ALUout, b=instruction, sel=notcins, out=firstmux);
    And(a=instruction[15], b=instruction[3], out=writeM);

// Computing (cccccc)
    ALU(x=secondmux, y=Dout, zy=instruction[11], ny=instruction[10], zx=instruction[9], nx=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

// Routing (ddd)
    And(a=instruction[4], b=instruction[15], out=stored);
    DRegister(in=ALUout, out=Dout, load=stored);

    // For A-Instructions, negate the ouput 
    Not(in=instruction[15], out=notcins);
    And(a=instruction[15], b=instruction[5], out=storeand);
    Or(a=notcins, b=storeand, out=storea);
    ARegister(in=firstmux, load=storea, out=Aout, out[0..14]=addressM);

    Mux16(a=Aout, b=inM, sel=instruction[12], out=secondmux);

// Jumps (jjj)
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);

    And(a=notzr, b=notng, out=gt);
    Or(a=zr, b=notng, out=ge);
    And(a=notzr, b=ng, out=lt);
    Or(a=zr, b=ng, out=le);

    And(a=zr, b=zr, out=eq);
    And(a=notzr, b=notzr, out=ne);

    Mux(a=false, b=gt, sel=instruction[0], out=negatives0);
    Mux(a=le, b=true, sel=instruction[0], out=negatives3);

    Mux(a=lt, b=ne, sel=instruction[0], out=negatives1);
    Mux(a=eq, b=ge, sel=instruction[0], out=negatives2);

    Mux(a=negatives0, b=negatives2, sel=instruction[1], out=secondround0);
    Mux(a=negatives1, b=negatives3, sel=instruction[1], out=secondround1);

    Mux(a=secondround0, b=secondround1, sel=instruction[2], out=jmp);

    Mux(a=false, b=jmp, sel=instruction[15], out=JUMP);

    PC(in=Aout, reset=reset, inc=true, load=JUMP, out[0..14]=pc);
}